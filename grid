#include <iostream>
#include <cassert>

template <typename T, size_t dim>
class Grid final {
public:
    using value_type = T;
    using size_type = unsigned;

private:
    Grid<T, dim-1>*  data;
    size_type  d_size;

public:
    Grid(Grid<T, dim - 1>* data, size_type d_size) : data(data), d_size(d_size) {};
    Grid() : d_size(1), data (new Grid<T, dim-1>[1]) {};
    Grid(Grid<T, dim> const& other) {
        data = other.data;
        d_size = other.d_size;
    };
    Grid(Grid<T, dim>&& other) {
        std::swap(data, other.data);
        std::swap(d_size, other.d_size);
    };

    Grid<T, dim>& operator=(Grid<T, dim>& other) {
        delete[] data;
        data = other.data;
        d_size = other.d_size;
        return *this;
    };
    Grid<T, dim>& operator=(Grid<T, dim>&& other) {
        std::swap(data, other.data);
        std::swap(d_size, other.d_size);
        return *this;
    };
    ~Grid() { delete[] data; }

    template<typename... Args>
    T operator()(size_type d_idx, Args... idxes) const {
        return data[d_idx](idxes...);
    }

    template<typename... Args>
    T& operator()(size_type d_idx, Args... idxes) {
        return data[d_idx](idxes...);
    }

    Grid<T, dim>& operator=(T const& t) {
        for (auto it = data, end = data + d_size; it != end; ++it) {
            *it = t;
        }
        return *this;
    }

    Grid(T const& t) : d_size(1), data(new Grid<T, dim-1>[1]) { data[0] = Grid<T, dim-1>(t); }

    template<typename... Args>
    Grid(size_type d, Args... dims) : d_size(d), data(new Grid<T, dim-1>[d]) {
        for (auto it = data, end = data + d; it != end; ++it) {
            *it = Grid<T, dim-1>(dims...);
        }
    }

    template<typename... Args>
    Grid(size_type d, Args... dims, T const& t) : d_size(d), data(new Grid<T, dim - 1>[d]) {
        for (auto it = data, end = data + d; it != end; ++it) {
            *it = Grid<T, dim-1>(dims..., t);
        }
    }
};

template <typename T>
class Grid<T, 2> final {
public:
    using value_type = T;
    using size_type = unsigned;

private:
    T*  data;
    size_type  y_size, x_size;

public:
    Grid(T* data, size_type y_size, size_type x_size) : data(data), y_size(y_size), x_size(x_size) {}

    Grid(Grid<T,2> const& other) {
        data = other.data;
        y_size = other.y_size;
        x_size = other.x_size;
    };

    Grid(Grid<T,2>&& other) {
        std::swap(data, other.data);
        std::swap(x_size, other.x_size);
        std::swap(y_size, other.y_size);
    };

    Grid() : y_size(1), x_size(1), data(new T[1]) { data[0] = T(); };

    Grid<T,2>& operator=(Grid<T,2>& other) {
        delete[] data;
        data = other.data;
        y_size = other.y_size;
        x_size = other.x_size;
        return *this;
    };
    Grid<T,2>& operator=(Grid<T,2>&& other) {
        std::swap(data, other.data);
        std::swap(x_size, other.x_size);
        std::swap(y_size, other.y_size);
        return *this;
    };
    ~Grid() { delete[] data; }

    T operator()(size_type y_idx, size_type x_idx) const {
        return data[y_idx * x_size + x_idx];
    }
    T& operator()(size_type y_idx, size_type x_idx) {
        return data[y_idx * x_size + x_idx];
    }
    Grid<T,2>& operator=(T const& t) {
        for (auto it = data, end = data + x_size * y_size; it != end; ++it) {
            *it = t;
        }
        return *this;
    }

    Grid(T const& t) : x_size(1), y_size(1), data(new T[1]) { data[0] = t; }

    Grid(size_type y, size_type x) : x_size(x), y_size(y), data(new T[x * y]) {
        for (auto it = data, end = data + x * y; it != end; ++it) {
            *it = T();
        }
    }

    Grid(size_type y, size_type x, T const& t) : x_size(x), y_size(y), data(new T[x * y]) {
        for (auto it = data, end = data + x * y; it != end; ++it) {
            *it = t;
        }
    }

    size_type get_y_size() const { return y_size; }
    size_type get_x_size() const { return x_size; }

    T* operator[] (size_type idx) {
        return &data[idx * x_size];
    }
};

int main()
{
    Grid<float, 2> g(3, 2, 1.0);
    std::cout << g.get_x_size() << " " << g.get_y_size() << std::endl;
    std::cout << g[1][1] << " " << g(0, 0) << std::endl << std::endl;

    Grid<float, 4> G = Grid<float, 4>(5, 5, 5, 3, 3.0);
    std::cout << G(4,4,4,2);

    return 0;
}
